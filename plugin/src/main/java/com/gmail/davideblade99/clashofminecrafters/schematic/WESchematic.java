/*
 * Copyright (c) DavideBlade.
 *
 * All Rights Reserved.
 */

package com.gmail.davideblade99.clashofminecrafters.schematic;

import com.gmail.davideblade99.clashofminecrafters.exception.PastingException;
import com.gmail.davideblade99.clashofminecrafters.util.FileUtil;
import com.gmail.davideblade99.clashofminecrafters.util.geometric.Size3D;
import com.gmail.davideblade99.clashofminecrafters.util.geometric.Vector;
import com.sk89q.worldedit.EditSession;
import com.sk89q.worldedit.bukkit.BukkitWorld;
import com.sk89q.worldedit.extent.clipboard.Clipboard;
import com.sk89q.worldedit.extent.clipboard.io.ClipboardFormat;
import com.sk89q.worldedit.extent.clipboard.io.ClipboardFormats;
import com.sk89q.worldedit.extent.clipboard.io.ClipboardReader;
import com.sk89q.worldedit.function.operation.Operation;
import com.sk89q.worldedit.function.operation.Operations;
import com.sk89q.worldedit.math.BlockVector3;
import com.sk89q.worldedit.regions.Region;
import com.sk89q.worldedit.session.ClipboardHolder;
import org.bukkit.World;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

/**
 * Class representing the schematic of WorldEdit
 *
 * @since v3.1.2
 */
public final class WESchematic implements Schematic {

    private final Clipboard clipboard; // Clipboard of the schematic
    private final Size3D size;
    private Vector origin;

    public WESchematic(@Nonnull final File schematicFile) {
        this.clipboard = getClipboard(schematicFile);

        final BlockVector3 dimensions = clipboard.getDimensions();
        this.size = new Size3D(dimensions.getBlockX(), dimensions.getBlockY(), dimensions.getBlockZ());
    }

    @Override
    @Nonnull
    public Size3D getSize() {
        return this.size;
    }

    @Override
    @Nonnull
    public Vector getOrigin() {
        return this.origin;
    }

    @Override
    public String toString() {
        return "Type: [WorldEdit], origin: [" + origin.toString() + "], size: [" + size.toString() + "]";
    }

    /**
     * Paste the schematic from the specified position, facing north-east
     *
     * @param world  - is the world in which to paste the schematic.
     * @param origin - is the {@code Location} where schematic should be past.
     */
    //TODO: prendere spunto dai builder di WE (EditSessionBuilder & PasteBuilder)
    //TODO: prendere spunto da Vector3 e Vector2 di WE
    //TODO: prendere spunto da BukkitAdapter di WE (per passare dalle mie implementazioni a quelle di WE o a quelle di Bukkit)
    @Override
    public void paste(@Nonnull final World world, @Nonnull final Vector origin) throws PastingException {
        this.origin = origin;

        final Vector adjustedOrigin = getPasteLocation(clipboard, origin);

        try (EditSession editSession = com.sk89q.worldedit.WorldEdit.getInstance().newEditSession(new BukkitWorld(world))) {
            final Operation operation = new ClipboardHolder(clipboard).createPaste(editSession).to(BlockVector3.at(adjustedOrigin.getX(), adjustedOrigin.getY(), adjustedOrigin.getZ())).copyEntities(true).ignoreAirBlocks(false).build();
            Operations.complete(operation);
        } catch (final Exception e) {
            e.printStackTrace();

            throw new PastingException("Exception generated by WorldEdit");
        }


        /*TODO
         * https://github.com/Boomclaw/MineResetLite/blob/master/src/main/java/com/koletar/jj/mineresetlite/commands/MineCommands.java#L112
         * https://github.com/EngineHub/WorldEdit/blob/master/worldedit-core/src/main/java/com/sk89q/worldedit/command/ClipboardCommands.java#L145
         */
    }

    /**
     * Returns the position where the schematic is to be pasted so that it faces north-east and upwards from the
     * origin. In other words, this method ensures that the schematic is always placed in the same direction. If
     * the {@code Location} origin were used directly to paste the schematic, it would be positioned from the
     * origin, but in an unpredictable direction that would depend only on the position the player had when he
     * copied/saved the schematic.
     * <p>
     * Example: when the schematic was copied/saved, the player was north-east of the structure (the construction
     * was therefore south-west of the player). If you paste in the origin without using this adjusted position,
     * the schematic will be pasted in the south-west direction, instead of always in the usual direction. This may
     * cause problems with overlapping islands.
     *
     * @param clipboard is the {@code Clipboard} of schematic.
     * @param origin    is the {@code Vector} where schematic should be past.
     *
     * @return the new position where the schematic is to be pasted.
     */
    @Nonnull
    private Vector getPasteLocation(@Nonnull final Clipboard clipboard, @Nonnull final Vector origin) {
        final Vector adjustedLocation = new Vector(origin);

        final Region region = clipboard.getRegion();
        final BlockVector3 minimumPoint = region.getMinimumPoint();

        // Offset indicates the position the player had when he copied the schematic
        final BlockVector3 offset = minimumPoint.subtract(clipboard.getOrigin());

        adjustedLocation.subtract(offset.getBlockX(), offset.getBlockY(), offset.getBlockZ()); // North-west corner
        adjustedLocation.subtract(0, 0, region.getMaximumPoint().subtract(minimumPoint).getBlockZ()); // South-west corner

            /*TODO: rimuovere se inutili
            final com.sk89q.worldedit.Vector min = BukkitUtil.toVector(origin.toBukkitLoc()).add(offset);
            final com.sk89q.worldedit.Vector max = min.add(clipboard.getRegion().getMaximumPoint().subtract(clipboard.getRegion().getMinimumPoint()));
            final com.sk89q.worldedit.Vector northEast = min.add(0, 0, clipboard.getRegion().getMaximumPoint().subtract(clipboard.getRegion().getMinimumPoint()).getZ());*/

        return adjustedLocation;
    }

    /**
     * Obtain {@code CuboidClipboard} from specified file
     *
     * TODO
     * //@param schematic - is the schematic from which will be got {@code CuboidClipboard}
     *
     * @return {@code CuboidClipboard} obtained from specified file {@code Null} if schematic is {@code null} or if
     * an exception has occurred
     *
     * @since v2.0
     */
    //TODO: non ha senso che i parametri siano Nullable?
    @Nullable
    private Clipboard getClipboard(@Nullable final File schematicFile) {
        if (schematicFile == null)
            return null;

        //if (!schematicFile.exists()) //TODO: gestire il caso null
            //FileUtil.copyFile(schematic.getName() + ".schematic", schematicFile); //TODO: queesto viene già fatto nel chiamante

        final ClipboardFormat format = ClipboardFormats.findByFile(schematicFile);
        if (format == null) {
            //TODO: se il formato non è corretto? Invio sicuramente un messaggio di errore in console ma poi? Anche all'utente? devo poi chiaramente anche annullar l'operazione
            return null;
        }

        try (ClipboardReader reader = format.getReader(new FileInputStream(schematicFile))) {
            return reader.read();
        } catch (final IOException ignored) {
            //TODO: non faccio nulla? Non invio alert né annullo operazioni?
            return null;
        }
    }
}
